indx.j = which(sc == j)
pairs.j = as.matrix(expand.grid(indx.j, indx.j))
sc.2.consensus[pairs.j] = sc.2.consensus[pairs.j] + 1
}
}
}
expr = as.matrix(top88.attra11.cln15)
?save
specc.consensus.all.features = specc.consensus(expr, 10, 100)
save(specc.consensus.all.features, file='specc.consensus.all.features.RData')
??specc
?specc
specc.consensus <- function(expr, ncls, ntimes) {
### This function aims to perform spectral clustering for ntimes.
### Create a N x N consensus matrix, where N is number of variables.
require(kernlab)
# Create a N x N matrix
id = row.names(expr)
nvar = length(id)
sc.2.consensus = matrix(0, nvar, nvar)
rownames(sc.2.consensus) = id
colnames(sc.2.consensus) = id
# Perform spectral clustering for ntimes
for (i in 1:ntimes) {
cat(i, '\n')
# Spectral clustering
sc = specc(expr, centers = ncls)
sc = as.matrix(sc)
# Update the consensus matrix
for (j in 1:ncls) {
# Create all pairs of each cluster
indx.j = which(sc == j)
pairs.j = as.matrix(expand.grid(indx.j, indx.j))
sc.2.consensus[pairs.j] = sc.2.consensus[pairs.j] + 1
}
}
}
specc.consensus.all.features = specc.consensus(expr, 10, 100)
save(specc.consensus.all.features, file='specc.consensus.all.features.RData')
q()
library(predictiveModeling)
require(MASS)
require(survival)
require(predictiveModeling)
require(gbm)
require(caret)
require(randomSurvivalForest)
synapseLogin()
require(BCC)
require(PredictiveModeling)
synapseLogin()
syn1688419 <- getEntity('syn1688419')
source('http://depot.sagebase.org/CRAN.R')
pkgInstall(c("synapseClient"))
install.packages(package, repos = allRepos, ...)
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source('http://depot.sagebase.org/CRAN.R')
pkgInstall(c("synapseClient"))
detach("package:synapseClient", unload=TRUE)
library("synapseClient", lib.loc="C:/Users/chunhuic/Documents/R/win-library/2.15")
q()
install.packages("D:/Dropbox/Shared_group/Projects/Chunhui.Project/SoftwaresANDPackages/iCluster/iClusterPlus_0.99.4.tar.gz", repos = NULL, type = "source")
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
install.packages("cgdsr")
require(cgdsr)
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
test(mycgds)
getCancerStudies(mycgds)
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
getCaseLists(mycgds,mycancerstudy)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
data(gbm)
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[4,1]
getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
tmp = getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
View(tmp)
tmp[,'TCGA.AB.2994']
tmp[1,'TCGA.AB.2994']
tmp['TCGA.AB.2994',]
is.na(tmp['TCGA.AB.2994',])
q()
data(T);
data(Scores);
res=list();
classes=1:10
require(PerfMeas)
data(T);
data(Scores);
res=list();
classes=1:10
install.packages("graph")
require(qpgraph)
?qpPrecisionRecall
require(mvtnorm)
nVar <- 50  ## number of variables
maxCon <- 5 ## maximum connectivity per variable
nObs <- 30  ## number of observations to simulate
A <- qpRndGraph(p=nVar, d=maxCon)
Sigma <- qpG2Sigma(A, rho=0.5)
X <- rmvnorm(nObs, sigma=as.matrix(Sigma))
install.packages("mvtnorm")
require(mvtnorm)
set.seed(123)
A <- qpRndGraph(p=nVar, d=maxCon)
Sigma <- qpG2Sigma(A, rho=0.5)
X <- rmvnorm(nObs, sigma=as.matrix(Sigma))
View(X)
## estimate non-rejection rates
nrr.estimates <- qpNrr(X, q=5, verbose=FALSE)
## estimate Pearson correlation coefficients
pcc.estimates <- qpPCC(X)
fix(nrr.estimates)
tmp = abs(pcc.estimates$R)
View(X)
install.packages("minet")
load("D:/Dropbox/Shared_group/Projects/SBV/SBV.challenge.data/SBV_STC_subchallenge1/Gene.based.prediction/RData/phospho.states.5&25min.merged.RData")
install.packages("RWeka")
library("RWeka", lib.loc="C:/Users/chunhuic/Documents/R/win-library/2.15")
library("RWekajars", lib.loc="C:/Users/chunhuic/Documents/R/win-library/2.15")
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
require(limma)
?lmFit
install.packages("NCBI2R")
load("D:/Dropbox/Shared_group/Projects/Dream7/Experiments/expt.1/Data/Complete_METABRIC_Expression_Data.RData")
source("http://bioconductor.org/biocLite.R")
biocLite("Biobase")
load("D:/Dropbox/Shared_group/Projects/Dream7/Experiments/expt.1/Data/Complete_METABRIC_Expression_Data.RData")
tmp = exprs(Complete_METABRIC_Expression_Data)
View(tmp)
rownames(tmp)[1:10]
ckear
clear
load("D:/Dropbox/Shared_group/Projects/Dream7/BreastCancerSurvival/Phase.3/Data/Proc.Data/proc.exprs.RData")
View(proc.exprs)
load("D:/Dropbox/Shared_group/Projects/Dream7/BreastCancerSurvival/Phase.3/Data/expanded.clinical.features.RData")
View(expanded.clinical.features)
load("D:/Dropbox/Shared_group/Projects/Dream7/Experiments/expt.1/RData/Metabric.gexprs.RData")
View(proc.exprs)
hist(proc.exprs[1,])
mean(proc.exprs[1,])
sd(proc.exprs[1,])
sd(proc.exprs[100,])
mean(proc.exprs[100,])
mean(proc.exprs[,1])
sd(proc.exprs[,1])
sd(proc.exprs[,100])
jpeg(file="88GMs.ttest.distr.jpeg", res=300, width=1500, height=1500)
hist(log10(GMs.ttest), 25, col="blue", xlab="Log p value", main="", axes=FALSE)
axis(1)
axis(2, las=1, at=c(0, 10, 20, 30))
dev.off()
# This function plot the histogram of the module expression distribuion
GM.expr.distr.histogram <- function(GM.status.metabric, mod.expr, expr.cf.GMs, figurename, typeofplot) {
nmods = nrow(GM.status.metabric)
if (typeofplot==1) {
jpeg(figurename, width = 8000, height = 11000, res=200)
par(mfrow=c(11,8))
}
for (i in 1:nmods) {
# Get the expression profile and on/off status for each GM for all patients
mod.i.expr = mod.expr[i,]
mod.i.state = GM.status.metabric[i,]
# Divide the patients into two sets based on the on or off state of the GM
indx.i.on = which(mod.i.state != 0)
indx.i.off = which(mod.i.state == 0)
mod.i.expr.on = mod.i.expr[indx.i.on]
mod.i.expr.off = mod.i.expr[indx.i.off]
# Plot the histogram of GM expression profile for these two patient sets
tt = rownames(mod.expr)[i]
if (typeofplot==2) {
jpeg(paste(tt, '.jpeg', sep=''), width = 1500, height = 1500, res=300)
}
breaks.hist = seq(min(mod.i.expr)-0.1, max(mod.i.expr)+0.1, by=0.1)
p.on = hist(mod.i.expr.on, breaks = breaks.hist, plot=FALSE)
p.on$counts = p.on$counts/sum(p.on$counts)
p.off = hist(mod.i.expr.off, breaks = breaks.hist, plot=FALSE)
p.off$counts = p.off$counts/sum(p.off$counts)
plot(p.on, col=rgb(0,0,1,1/4), xlab='GM expression', main=tt)
plot(p.off, col=rgb(1,0,0,1/4), add=TRUE)
abline(v=expr.cf.GMs[i], lty=5, col=2, lwd=2)
text(expr.cf.GMs[i], 0.1, paste('expr.cutoff = ', format(expr.cf.GMs[i], digits=5), sep=''), col=2)
if (typeofplot==2) {
dev.off()
}
}
if (typeofplot==1) {
dev.off()
}
}
# The function is to perform t-test on the two patient groups divided by each GM
ttest.twoptgps.byGMs <- function(GM.status.metabric, mod.expr) {
nmods = nrow(GM.status.metabric)
ttest.GMs = matrix(NA,nmods,1)
rownames(ttest.GMs) = rownames(GM.status.metabric)
colnames(ttest.GMs) = "pv.ttest"
for (i in 1:nmods) {
# Get the expression profile and on/off status for each GM for all patients
mod.i.expr = mod.expr[i,]
mod.i.state = GM.status.metabric[i,]
# Divide the patients into two sets based on the on or off state of the GM
indx.i.on = which(mod.i.state != 0)
indx.i.off = which(mod.i.state == 0)
mod.i.expr.on = mod.i.expr[indx.i.on]
mod.i.expr.off = mod.i.expr[indx.i.off]
# Perform t test
ttest.i = t.test(mod.i.expr.on, mod.i.expr.off)
ttest.GMs[i] = ttest.i$p.value
}
return(ttest.GMs)
}
### Call libraries
library("gplots")
### Load datasets
load('RData/GM.expr.cuttoff.RData')
load('RData/top88.module.genelist.RData')
load('RData/gene.expr.metabric.normalized.RData')
### Calculate expression profile for each GM by averaging over all genes included.
npts = ncol(metabric.gene.expr)
nmods = length(top88.module.genes)
mod.expr = matrix(0, nmods, npts)
mod.names = paste(rownames(GM.expr.cutoff), '.csv', sep='')
for (i in 1:nmods) {
mgenes.i = top88.module.genes[[mod.names[i]]]
mgenes.i.expr = metabric.gene.expr[mgenes.i,]
mod.expr[i,] = as.matrix(colMeans(mgenes.i.expr))
}
rownames(mod.expr) = rownames(GM.expr.cutoff)
colnames(mod.expr) = colnames(metabric.gene.expr)
### Determine the on or off status of each GM for all DREAM 7 patients
GM.status.metabric = matrix(0,nmods,npts)
rownames(GM.status.metabric) = rownames(GM.expr.cutoff)
colnames(GM.status.metabric) = colnames(metabric.gene.expr)
for (i in 1:88) {
# For each GM, get the expression profile, cutoff ratio and up/dn information
gm.i.expr.cf = GM.expr.cutoff[i,]
gm.i.expr = mod.expr[i,]
if (gm.i.expr.cf[2] == 1) {
indx.on = which(gm.i.expr > gm.i.expr.cf[1])
GM.status.metabric[i, indx.on] = 1
} else if(gm.i.expr.cf[2] == -1) {
indx.on = which(gm.i.expr < gm.i.expr.cf[1])
GM.status.metabric[i, indx.on] = -1
} else {
stop('Wrong up/dn information for GM. It has to be -1 or 1 for down-regulated modules and up-regulated modules!')
}
}
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
source("http://bioconductor.org/biocLite.R")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
source("http://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
hg19GeneLengths <- function(symbols) {
### Quick and dirty total exonic lengths, leveraging GenomeFeatures and the Hs org package
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
exons = reduce(exons)
sum( width(exons) )
})
}
hg19GeneLengths( c('STAT1','CXCL10','ACTB','PDCD1') )
hg19GeneLengths( c('TTN') )
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(org.Hs.eg.db)
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
egs = unlist(mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG))
keys(org.Hs.egSYMBOL2EG)
tmp = c('STAT1','CXCL10','ACTB','PDCD1')
symbols = c('STAT1','CXCL10','ACTB','PDCD1')
egs = unlist(mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG))
egs = unlist(mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG))
egs    = unlist(  mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG) )
mget(symbols[ symbols %in% keys(org.Hs.egSYMBOL2EG) ],org.Hs.egSYMBOL2EG)
egs
egs    = unlist(keys(org.Hs.egSYMBOL2EG)])
egs    = unlist(  mget(keys(org.Hs.egSYMBOL2EG), org.Hs.egSYMBOL2EG) )
egs
sapply(egs,function(eg){
exons = exons.db[[eg]]
exons = reduce(exons)
sum( width(exons) )
}}
sapply(egs,function(eg){
exons = exons.db[[eg]]
exons = reduce(exons)
sum( width(exons) )
})
summary(egs)
egs[1]
egs[2]
egs
sapply(egs,function(eg)
{
exons = exons.db[[eg]]
exons = reduce(exons)
sum( width(exons) )
})
egs
exons.db
exons.db[[1]]
exons.db[[egs[1]]]
reduce(exons.db[[egs[1]]])
wdith(reduce(exons.db[[egs[1]]]))
width(reduce(exons.db[[egs[1]]]))
egs[1]
ngs = length(egs)
gene.exome.length = matrix(NA, ngs, 1)
rownames(gene.exome.length) = egs
colnames(gene.exome.length) = "Gene.Exome.Length"
View(gene.exome.length)
gnames = names(egs)
ngs = length(gnames)
gene.exome.length = matrix(NA, ngs, 1)
rownames(gene.exome.length) = gnames
colnames(gene.exome.length) = "Gene.Exome.Length"
View(gene.exome.length)
i=1
g.i = gnames[i]
gene.exome.length[g.i,]
exons.i = exons.db[[g.i]]
exons.i = reduce(exons.i)
exons.i
is.null(exons.i)
i=2
g.i = gnames[i]
exons.i = exons.db[[g.i]]
exons.i
i=100
g.i = gnames[i]
exons.i = exons.db[[g.i]]
exons.i
g.i
g.i="TTN"
exons.i = exons.db[[g.i]]
exons.i
g.i="STAT1"
exons.i = exons.db[[g.i]]
exons.i
exons.db
exons.i = exons.db[[1]]
exons.i
g.i = egs[i]
g.i
exons.i = exons.db[[g.i]]
exons.i
# exons data
exons.db = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by='gene')
# genes
egs = unlist(mget(keys(org.Hs.egSYMBOL2EG), org.Hs.egSYMBOL2EG))
gnames = names(egs)
ngs = length(gnames)
# Create matrix for gene exome length
gene.exome.length = matrix(NA, ngs, 1)
rownames(gene.exome.length) = gnames
colnames(gene.exome.length) = "Gene.Exome.Length"
# Calculate length for each gene
for (i in 1:ngs){
g.i = egs[i]
exons.i = exons.db[[g.i]]
if (is.null(exons.i)) {
next
} else {
exons.i = reduce(exons.i)
gene.exome.length[g.i,] = sum(width(exons.i))
}
}
g.i
names(g.i)
for (i in 1:ngs){
g.i = egs[i]
gname.i = names(g.i)
exons.i = exons.db[[g.i]]
if (is.null(exons.i)) {
next
} else {
exons.i = reduce(exons.i)
gene.exome.length[g.i,] = sum(width(exons.i))
}
}
for (i in 1:ngs){
g.i = egs[i]
gname.i = names(g.i)
exons.i = exons.db[[g.i]]
if (is.null(exons.i)) {
next
} else {
exons.i = reduce(exons.i)
gene.exome.length[gname.i,] = sum(width(exons.i))
}
}
cat (i )
cat (i, "\t", ngs, "\n")
View(gene.exome.length)
for (i in 1:ngs){
cat (i, "\t", ngs, "\n")
g.i = egs[i]
gname.i = names(g.i)
exons.i = exons.db[[g.i]]
if (is.null(exons.i)) {
next
} else {
exons.i = reduce(exons.i)
gene.exome.length[gname.i,] = sum(width(exons.i))
}
}
indx.nonna = which(!is.na(gene.exome.length))
View(gene.exome.length)
gene.exome.length = gene.exome.length[indx.nonna,]
indx.nonna
gene.exome.length
gene.exome.length = as.matrix(gene.exome.length)
View(gene.exome.length)
gene.exome.length["TTN",]
write.csv(gene.exome.length, file="Gene.Exome.Length.csv")
get.dir
getwd()
log2(38+1)
log2(25.7802+1)
setwd("D:/Dropbox (XinghuaLu)/Shared_group/TSDM/TCI")
require(gplots)
data.input.matrix = read.csv("finalTop100GtM.csv", header=FALSE)
tumorids = data.input.matrix[-1,1]
top50muts = data.input.matrix[1,-1]
mutation.matrix = data.input.matrix[-1,]
mutation.matrix = mutation.matrix[,-1]
mutation.matrix = matrix(as.numeric(as.matrix(mutation.matrix)), dim(mutation.matrix))
indx.nomuts = which(rowSums(mutation.matrix)==0)
mutation.matrix = mutation.matrix[-indx.nomuts,]
mutation.matrix.500tumorsamples = mutation.matrix[1:500,]
heatmap.plot = heatmap.2(mutation.matrix.500tumorsamples)
heatmap.plot = heatmap.2(mutation.matrix.500tumorsamples, trace='none')
heatmap.plot = heatmap.2(mutation.matrix.500tumorsamples, trace='none', col=c(2,0))
heatmap.plot = heatmap.2(mutation.matrix.500tumorsamples, trace='none', col=c(0,2))
heatmap.plot
rowindex = heatmap.plot$rowInd
colindex = heatmap.plot$colInd
mutation.matrix.500tumorsamples.hearmap.reorganize = mutation.matrix.500tumorsamples[rowindex, ]
mutation.matrix.500tumorsamples.hearmap.reorganize = mutation.matrix.500tumorsamples.hearmap.reorganize[, colindex]
image(mutation.matrix.500tumorsamples.hearmap.reorganize)
image(mutation.matrix.500tumorsamples.hearmap.reorganize, col=c(0,2))
mutation.matrix.500tumorsamples.hearmap.reorganize = mutation.matrix.500tumorsamples
mutation.matrix.500tumorsamples.hearmap.reorganize = mutation.matrix.500tumorsamples.hearmap.reorganize[rowindex, ]
mutation.matrix.500tumorsamples.hearmap.reorganize = mutation.matrix.500tumorsamples.hearmap.reorganize[, colindex]
image(mutation.matrix.500tumorsamples.hearmap.reorganize, col=c(0,2))
rowindex
colindex
heatmap.plot$colDendrogram
View(mutation.matrix.500tumorsamples.hearmap.reorganize)
mutation.matrix.100tumorsamples = mutation.matrix[1:100,]
mutation.matrix.100tumorsamples = mutation.matrix[1:100,]
rownames(mutation.matrix.100tumorsamples) = tumorids[1:100]
colnames(mutation.matrix.100tumorsamples) = top50muts
heatmap.plot = heatmap.2(mutation.matrix.100tumorsamples, trace='none', col=c(0,2))
top50muts
rowindex = heatmap.plot$rowInd
colindex = heatmap.plot$colInd
colindex
rowindex
tumorids[68]
which(tumorids=="TCGA-DK-A3IM")
which(tumorids=="TCGA-BT-A3PK")
heatmap.plot = heatmap.2(mutation.matrix.100tumorsamples, trace='none', col=c(0,2))
rowindex = rev(heatmap.plot$rowInd)
colindex = rev(heatmap.plot$colInd)
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[rowindex, ]
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[, colindex]
image(mutation.matrix.100tumorsamples.hearmap.reorganize, col=c(0,2))
rowindex = rev(heatmap.plot$rowInd)
colindex = heatmap.plot$colInd
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[rowindex, ]
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[, colindex]
image(mutation.matrix.100tumorsamples.hearmap.reorganize, col=c(0,2))
rowindex = heatmap.plot$rowInd
colindex = rev(heatmap.plot$colInd)
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[rowindex, ]
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[, colindex]
image(mutation.matrix.100tumorsamples.hearmap.reorganize, col=c(0,2))
revRowInd <- match(c(1:length(heatmap.plot$rowInd)), heatmap.plot$rowInd)
revColInd <- match(c(1:length(heatmap.plot$colInd)), heatmap.plot$colInd)
revRowInd <- match(c(1:length(heatmap.plot$rowInd)), heatmap.plot$rowInd)
revColInd <- match(c(1:length(heatmap.plot$colInd)), heatmap.plot$colInd)
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[revRowInd, ]
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[, revColInd]
image(mutation.matrix.100tumorsamples.hearmap.reorganize, col=c(0,2))
heatmap.plot = heatmap.2(mutation.matrix.100tumorsamples, trace='none', col=c(0,2))
# Extract row and column index
revRowInd <- match(c(1:length(heatmap.plot$rowInd)), heatmap.plot$rowInd)
revColInd <- match(c(1:length(heatmap.plot$colInd)), heatmap.plot$colInd)
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples[revRowInd, ]
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[, revColInd]
image(mutation.matrix.100tumorsamples.hearmap.reorganize, col=c(0,2))
heatmap.plot = heatmap.2(mutation.matrix.100tumorsamples, trace='none', col=c(0,2))
RowInd = heatmap.plot$rowInd
ColInd = heatmap.plot$colInd
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples[RowInd, ]
mutation.matrix.100tumorsamples.hearmap.reorganize = mutation.matrix.100tumorsamples.hearmap.reorganize[, ColInd]
image(mutation.matrix.100tumorsamples.hearmap.reorganize, col=c(0,2))
image(t(mutation.matrix.100tumorsamples.hearmap.reorganize), col=c(0,2))
